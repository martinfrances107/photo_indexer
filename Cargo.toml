#cargo-features = ["codegen-backend"]

[package]
authors = ["martin <martinfrances107@hotmail.com>"]
edition = "2021"
categories = ["images"]
keywords = ["exif"]
name = "photo_indexer"
readme = "README.md"
description = "Using modern indexing of a collection of images to provide search."
license = "MIT"
repository = "https://github.com/martinfrances107/photo_indexer"
version = "0.1.0"

# MSRV this project makes use of LazyLock
rust-version = "1.80"

[lib]
crate-type = ["cdylib", "rlib"]

[profile.release]
codegen-units = 1
lto = true

[dependencies]
# I was depending on kamadak-exif :-
#
# kamadak-exif = { version = "~0.5" }
#
# I want to override the package kamadak-exif, with a patch that adds the auto derivation of PartialEq
# to the Field struct and all its sub types. ( there is a pending PR )
#
# Notable the git repo associated with the crate kamadak-exif has an inconsistent name.
# is documentation says that it has been manually renamed in crates.io to avoid a conflict with exif
#
# This prevents the crate from being patched with the conventional
# [patch.crates-io] override.
#
# It must be replaced directly with this line :-
exif = { git = "https://github.com/martinfrances107/exif-rs", branch = "PartialEq" }

leptos_router = { version = "0.7.2" }
leptos_meta = { version = "0.7.2" }
leptos = { version = "0.7.2" }
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
cfg-if = "1"
console_error_panic_hook = "0.1"
leptos_actix = { version = "0.7.2", optional = true }
tracing = "~0.1"
tracing-subscriber = "~0.3"
wasm-bindgen = "0.2.99"
walkdir = "2"
seroost_lib = { git = "https://github.com/martinfrances107/seroost", branch = "main" }
serde = { version = "~1", features = ["derive"] }
log = "0.4.21"
pretty_assertions = "1.4.0"
web-sys = "0.3"
clap = { version = "4.5.4", features = ["derive"] }

[features]
csr = ["leptos/csr"]
hydrate = ["leptos/hydrate"]
ssr = [
  "dep:actix-files",
  "dep:actix-web",
  "dep:leptos_actix",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "pi"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  browser list query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"


# https://benw.is/posts/how-i-improved-my-rust-compile-times-by-seventy-five-percent
# Optimization suggested by
[profile.dev]
opt-level = 1

[profile.dev.package."*"]
opt-level = 3
